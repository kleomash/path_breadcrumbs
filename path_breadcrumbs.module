<?php

/**
 * Implements hook_page_alter().
 */
function path_breadcrumbs_page_alter(&$page) {

  // See if current page has path breadcrumbs.
  $breadcrumbs = path_breadcrumbs_load_variant(request_path());

  // Set breadcrumbs for current page if it exists.
  if ($breadcrumbs) {
    drupal_set_breadcrumb($breadcrumbs);
  }
}

/**
 *
 * Load path breadcrumb variant for page url.
 *
 * @param  $path
 *   Current page url.
 * @return object
 *   Path breadcrumb that matches page url.
 */
function path_breadcrumbs_load_variant($path) {

  if (!$path) {
    return FALSE;
  }

  // Create sql pattern from url.
  $path_vars = explode('/', $path);
  if ($args_count = (sizeof($path_vars) - 1)) {
    $sql_path = array_fill(0, $args_count, '%');
    array_unshift($sql_path, $path_vars[0]);
    $sql_replacements = implode('/', $sql_path);
  }
  else {
    $sql_replacements = $path;
  }

  // Select all variants matching current path.
  $variants = db_select('path_breadcrumbs', 'p')
    ->fields('p',  array('path_id', 'path'))
    ->condition('p.path', $sql_replacements, 'LIKE')
    ->condition('p.disabled', 0)
    ->orderBy('p.weight')
    ->execute();

  // Check if current path maches variant.
  // When first variant is found - return it.
  foreach ($variants as $variant) {
    $matched_path = array();
    $arguments    = explode('/', $variant->path);
    foreach ($arguments as $argument) {
      if ($argument[0] == '%') {
        $matched_path[] = '*';
      }
      else {
        $matched_path[] = $argument;
      }
    }
    $matched_path = implode('/', $matched_path);
    if (drupal_match_path($path, $matched_path)) {

      // Check if breadcrumb is accessible.
      $breadcrumb = path_breadcrumbs_load($variant->path_id);
      if (empty($breadcrumb->access)) {
        return $breadcrumb;
      }
      else {
        $contexts = path_breadcrumbs_get_contexts_from_arguments($breadcrumb->arguments);
        $access = ctools_access($breadcrumb->access, $contexts);
        if ($access) {
          return _path_breadcrumbs_build_breadcrumbs($breadcrumb, $contexts);
        }
      }
    }
  }
  return FALSE;
}

/**
 *
 * Build breadcrumbs navigation from loaded path breadcrumb variant.
 *
 * @param  $path_breadcrumb
 *   Object with path breadcrumb variant loaded from database.
 * @param $contexts
 *   Ctools contexts from current URL.
 * @return array
 *   Array with breadcrumbs navigation.
 */
function _path_breadcrumbs_build_breadcrumbs($path_breadcrumb, $contexts) {
  $breadcrumb = array();

  // Prepend HOME link to breadcrumbs navigation.
  if ($path_breadcrumb->home == TRUE) {
    $breadcrumb[] = l(t('Home'), '<front>');
  }

  // Convert arguments from url to contexts.
  if (!empty($path_breadcrumb->arguments)) {
    // Replace placeholders by current context values.
    $path_breadcrumb->titles = ctools_context_keyword_substitute($path_breadcrumb->titles, array(), $contexts);
    $path_breadcrumb->paths  = ctools_context_keyword_substitute($path_breadcrumb->paths, array(), $contexts);
  }

  // Explode titles and paths into array.
  $titles = explode("\n", $path_breadcrumb->titles);
  $paths  = explode("\n", $path_breadcrumb->paths);

  foreach ($titles as $key => $title) {

    // Translate breadcrumb title if needed.
    if ($path_breadcrumb->translatable == TRUE) {
      $title = t($title);
    }

    // Set a breadcrumb as a link or as a plain text.
    if (isset($paths[$key]) && $paths[$key] != '<none>') {
      $breadcrumb[] = l(check_plain($title), $paths[$key]);
    }
    elseif (isset($paths[$key]) && $paths[$key] == '<none>') {
      $breadcrumb[] = check_plain($title);
    }
  }

  return $breadcrumb;
}

/**
 * Save path breadcrumb.
 *
 * @param  $breadcrumb
 *   Object with path breadcrumb data.
 * @return int
 *   ID of inserted/updated path breadcrumb.
 */
function path_breadcrumbs_save($breadcrumb) {

  // Build array with full access data.
  if (!empty($breadcrumb->access) && !empty($breadcrumb->logic)) {
    $breadcrumb->access['logic'] = $breadcrumb->logic;
  }
  else {
    $breadcrumb->access = array();
  }

  // Remove spaces and empty lines in breadcrumb titles.
  $titles_output = array();
  $titles = explode("\n", $breadcrumb->titles);
  foreach ($titles as $title) {
    if ($trimmed_title = trim($title)) {
      $titles_output[] = $trimmed_title;
    }
  }

  // Remove spaces and empty lines in breadcrumb paths.
  $paths_output = array();
  $paths = explode("\n", $breadcrumb->paths);
  foreach ($paths as $path) {
    if ($trimmed_path = trim($path)) {
      $paths_output[] = $trimmed_path;
    }
  }

  // Build data to be inserted in database.
  $insert_data = array(
    'name'         => $breadcrumb->name,
    'machine_name' => $breadcrumb->machine_name,
    'path'         => $breadcrumb->path,
    'data'         => serialize(array(
      'titles'        => implode("\n", $titles_output),
      'paths'         => implode("\n", $paths_output),
      'home'          => $breadcrumb->home,
      'translatable'  => $breadcrumb->translatable,
      'arguments'     => $breadcrumb->arguments,
      'access'        => $breadcrumb->access,
    )),
  );

  if (!empty($breadcrumb->path_id)) {
    // Update path breadcrumbs.
    db_update('path_breadcrumbs')
      ->fields($insert_data)
      ->condition('path_id', $breadcrumb->path_id)
      ->execute();
  }
  else {
    // Create new path breadcrumbs.
    $path_id = db_insert('path_breadcrumbs')
      ->fields($insert_data)
      ->execute();
  }

  // Remove data from ctools object cache table.
  ctools_object_cache_clear('path_breadcrumbs', $breadcrumb->machine_name);

  // Return path breadcrumb ID.
  return isset($path_id) ? $path_id : $breadcrumb->path_id;
}

/**
 * Delete path breadcrumb.
 *
 * @param  $path_breadcrumb
 *   Path breadcrumb ID or Object to delete.
 * @return bool
 *   Result of path breadcrumb deletion.
 */
function path_breadcrumbs_delete($path_breadcrumb) {

  if (ctype_digit($path_breadcrumb)) {
    $path_id = $path_breadcrumb;
  }
  elseif (is_object($path_breadcrumb)) {
    $path_id = $path_breadcrumb->path_id;
  }
  else {
    return FALSE;
  }

  // Delete path breadcrumbs from database.
  $result = db_delete('path_breadcrumbs')
    ->condition('path_id', $path_id)
    ->execute();

  return $result;
}

/**
 * Load path breadcrumbs by ID.
 *
 * @param  $path_id
 *   ID of path breadcrumb that should be loaded
 * @return object
 *   Loaded path breadcrumb
 */
function path_breadcrumbs_load($path_id) {
  static $paths;

  // See if current breadcrumb already was loaded.
  if (!isset($paths[$path_id])) {

    // Load breadcrumb from database.
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.path_id', $path_id)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      // Merge breadcrumb data with parent for more flattening structure.
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$path_id] = $breadcrumb;
  }

  return $paths[$path_id];
}

/**
 * Load path breadcrumb by name.
 *
 * @param  $name
 *   Path breadcrumb's name.
 * @return object
 *   Object with path breadcrumb.
 */
function path_breadcrumbs_load_by_name($name) {
  static $paths;

  // See if current breadcrumb already was loaded.
  if (!isset($paths[$name])) {

    // Load breadcrumb from database.
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.machine_name', $name)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      // Merge breadcrumb data with parent for more flattening structure.
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$name] = $breadcrumb;
  }

  return $paths[$name];
}

/**
 * Load ctools contexts from path arguments.
 *
 * @param $arguments
 *   Path arguments.
 * @return array
 */
function path_breadcrumbs_get_contexts_from_arguments($arguments, $empty = FALSE) {
  $contexts = array();
  if (!empty($arguments)) {

    // Include ctools library for contexts.
    ctools_include('context');

    // Get contexts from arguments.
    foreach ($arguments as $keyword => $arg) {
      if (!empty($arg['argument'])) {
        $argument = ctools_get_argument($arg['argument']);
        if (isset($arg['settings'])) {
          $argument = array_merge($argument, $arg['settings']);
        }

        // See what we should return: empty contexts or from path arguments.
        $arg = $empty ? NULL : arg($arg['position']);

        // Build context.
        $context = call_user_func($argument['context'], $arg, $argument, $empty);
        $context->keyword = $keyword;
        $contexts[$keyword] = $context;
      }
    }
  }
  return $contexts;
}

/**
 * Get path breadcrumb data from cache.
 *
 * @param  $name
 *   Machine name of path breadcrumb that should be loaded.
 * @param bool $skip_cache
 *   Skip current cache or not.
 * @return object
 *   Return cached object.
 */
function path_breadcrumbs_object_cache_get($name, $skip_cache = FALSE) {
  ctools_include('object-cache');
  return ctools_object_cache_get('path_breadcrumbs', $name, $skip_cache);
}

/**
 * Cache path breadcrumb data.
 *
 * @param  $name
 *   Machine name of path breadcrumb.
 * @param  $data
 *   Data to store.
 * @return void
 */
function path_breadcrumbs_object_cache_set($name, $data) {
  ctools_include('object-cache');
  $data = (object) $data;
  ctools_object_cache_set('path_breadcrumbs', $name, $data);
}
