<?php

/**
 * @file
 * Provide core functions for path breadcrumbs modue.
 */

/**
 * Define module constants.
 */
define('PATH_BREADCRUMBS_RICH_SNIPPETS_DISABLED', 0);
define('PATH_BREADCRUMBS_RICH_SNIPPETS_RDFA', 1);
define('PATH_BREADCRUMBS_RICH_SNIPPETS_MICRODATA', 2);

/**
 * Implements hook_page_alter().
 */
function path_breadcrumbs_page_alter(&$page) {
  // See if current page has path breadcrumbs.
  $breadcrumbs = path_breadcrumbs_load_variant(current_path());

  // Set breadcrumbs for current page if it exists.
  if ($breadcrumbs) {
    drupal_set_breadcrumb($breadcrumbs);
  }
}

/**
 *
 * Load path breadcrumb variant for page url.
 *
 * @param  $path
 *   Current page url.
 * @return object
 *   Path breadcrumb that matches page url.
 */
function path_breadcrumbs_load_variant($path) {

  if (!$path) {
    return FALSE;
  }

  // Create sql pattern from url.
  $path_vars = explode('/', $path);
  if ($args_count = (sizeof($path_vars) - 1)) {
    $sql_path = array_fill(0, $args_count, '%');
    array_unshift($sql_path, $path_vars[0]);
    $sql_replacements = implode('/', $sql_path);
  }
  else {
    $sql_replacements = $path;
  }

  // Select all variants matching current path.
  $variants = db_select('path_breadcrumbs', 'p')
    ->fields('p',  array('path_id', 'path'))
    ->condition('p.path', $sql_replacements, 'LIKE')
    ->condition('p.disabled', 0)
    ->orderBy('p.weight')
    ->execute();

  // Check if current path maches variant.
  // When first variant is found - return it.
  foreach ($variants as $variant) {
    $matched_path = array();
    $arguments    = explode('/', $variant->path);
    foreach ($arguments as $argument) {
      if ($argument[0] == '%') {
        $matched_path[] = '*';
      }
      else {
        $matched_path[] = $argument;
      }
    }
    $matched_path = implode('/', $matched_path);
    if (drupal_match_path($path, $matched_path)) {

      // Load breadcrumbs and it's contexts from current path.
      $breadcrumb = path_breadcrumbs_load($variant->path_id);
      $contexts = path_breadcrumbs_get_contexts_from_arguments($breadcrumb->arguments);

      // If breadcrumb contains broken context
      // it means that unable to load context from URL.
      if (isset($contexts['broken_context'])) {
        continue;
      }

      // Check if breadcrumb is accessible.
      if (!empty($breadcrumb->access)) {
        $access = ctools_access($breadcrumb->access, $contexts);
        if (!$access) {
          continue;
        }
      }

      // Build suitable breadcrumb variant.
      return _path_breadcrumbs_build_breadcrumbs($breadcrumb, $contexts);
    }
  }
  return FALSE;
}

/**
 *
 * Build breadcrumbs navigation from loaded path breadcrumb variant.
 *
 * @param  $path_breadcrumb
 *   Object with path breadcrumb variant loaded from database.
 * @param $contexts
 *   Ctools contexts from current URL.
 * @return array
 *   Array with breadcrumbs navigation.
 */
function _path_breadcrumbs_build_breadcrumbs($path_breadcrumb, $contexts = array()) {
  $breadcrumb = array();

  // Add hook_path_breadcrumbs_view() for other developers.
  module_invoke_all('path_breadcrumbs_view', $path_breadcrumb, $contexts);

  // Prepend HOME link to breadcrumbs navigation.
  if ($path_breadcrumb->home == TRUE) {
    $home = variable_get('path_breadcrumbs_home_link_title', 'Home');
    $breadcrumb[] = l(t($home), '<front>');
  }

  // Convert breadcrumb titles and paths to string.
  $titles = implode("\n", $path_breadcrumb->titles);
  $paths  = implode("\n", $path_breadcrumb->paths);

  // Replace module placeholders.
  if (!empty($path_breadcrumb->arguments)) {
    $replace = array();
    $search = array();

    // Replace placeholders by its value from url.
    foreach ($path_breadcrumb->arguments as $keyword => $argument) {
      $search[]  = '!' . $keyword;
      $replace[] = arg($argument['position']);
    }

    // Replace placeholder for current page title.
    $search[]  = '!page_title';
    $replace[] = drupal_get_title();

    // Replace module placeholders.
    $titles = str_replace($search, $replace, $titles);
    $paths =  str_replace($search, $replace, $paths);
  }

  // Convert arguments from url to contexts.
  if (!empty($contexts)) {
    // Replace placeholders by current context values.
    $titles = ctools_context_keyword_substitute($titles, array(), $contexts);
    $paths  = ctools_context_keyword_substitute($paths, array(), $contexts);
  }

  // Explode titles and paths into array.
  $path_breadcrumb->titles_prepared = explode("\n", $titles);
  $path_breadcrumb->paths_prepared  = explode("\n", $paths);

  foreach ($path_breadcrumb->titles_prepared as $key => $title) {

    // Translate breadcrumb title if needed.
    if ($path_breadcrumb->translatable == TRUE) {
      $title = t($title);
    }

    // Decode title if required.
    $decode_html_entities = variable_get('path_breadcrumbs_decode_entities', TRUE);
    if ($decode_html_entities) {
      $title = html_entity_decode($title, ENT_QUOTES, 'UTF-8');
    }

    // Set a breadcrumb as a link or as a plain text.
    if (isset($path_breadcrumb->paths_prepared[$key]) && $path_breadcrumb->paths_prepared[$key] != '<none>') {
      $breadcrumb[] = l($title, $path_breadcrumb->paths_prepared[$key]);
    }
    elseif (isset($path_breadcrumb->paths_prepared[$key]) && $path_breadcrumb->paths_prepared[$key] == '<none>') {
      $breadcrumb[] = check_plain($title);
    }
  }

  // Allow other modules to alter breadcrumbs generated by this module.
  drupal_alter('path_breadcrumbs_view', $breadcrumb, $path_breadcrumb, $contexts);

  return $breadcrumb;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param $theme_registry
 *   Drupal theme registry that could be changed.
 */
function path_breadcrumbs_theme_registry_alter(&$theme_registry) {
  $internal_render = variable_get('path_breadcrumbs_internal_render', 1);
  if ($internal_render) {
    $theme_registry['breadcrumb']['theme path'] = drupal_get_path('module', 'path_breadcrumbs');
    $theme_registry['breadcrumb']['function'] = 'path_breadcrumbs_breadcrumb';
  }
}

/**
 * Override default theme_breadcrumb().
 *
 * @param $variables
 *   Contains array with breadcrumbs.
 * @return string
 *   Rendered breadcrumbs.
 */
function path_breadcrumbs_breadcrumb($variables) {
  $breadcrumbs = $variables['breadcrumb'];
  if (!empty($breadcrumbs)) {

    // Provide a navigational heading to give context for breadcrumb links to
    // screen-reader users. Make the heading invisible with .element-invisible.
    $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';

    // Hide breadcrumb navigation if it contains only one element.
    $hide_single_breadcrumb = variable_get('path_breadcrumbs_hide_single_breadcrumb', 0);
    if ($hide_single_breadcrumb && count($breadcrumbs) == 1) {
      return FALSE;
    }

    // Add options for rich snippets.
    $elem_tag = 'span';
    $elem_property = '';
    $root_property = '';
    $options = array();
    $snippet = variable_get('path_breadcrumbs_rich_snippets', PATH_BREADCRUMBS_RICH_SNIPPETS_DISABLED);
    if ($snippet == PATH_BREADCRUMBS_RICH_SNIPPETS_RDFA) {

      // Add link options for RDFa support.
      $options = array('attributes' => array('rel' => 'v:url', 'property' => 'v:title'), 'absolute' => TRUE, 'html' => TRUE);

      // Set correct properties for RDFa support.
      $elem_property = 'typeof="v:Breadcrumb"';
      $root_property = 'xmlns:v="http://rdf.data-vocabulary.org/#"';
    }
    elseif ($snippet == PATH_BREADCRUMBS_RICH_SNIPPETS_MICRODATA) {

      // Add link options for microdata support.
      $options = array('attributes' => array('itemprop' => 'url'), 'absolute' => TRUE, 'html' => TRUE);

      // Set correct properties for microdata support.
      $elem_property = 'itemscope itemtype="http://data-vocabulary.org/Breadcrumb"';
      $elem_tag = 'div';

      // Add style that will display breadcrumbs wrapped in <div> inline.
      drupal_add_css(drupal_get_path('module', 'path_breadcrumbs') . '/path_breadcrumbs.css');
    }

    foreach ($breadcrumbs as $key => $breadcrumb) {

      // Build classes for the breadcrumbs.
      $classes = array('inline');
      $classes[] = $key % 2 ? 'even' : 'odd';
      if ($key == 0) {
        $classes[] = 'first';
      }
      if (count($breadcrumbs) == $key + 1) {
        $classes[] = 'last';
      }

      // For rich snippets support all links should be processed in the same way,
      // even if they are provided not by Path Breadcrumbs module. So I have to
      // parse html code and create links again with new properties.
      preg_match('/href="([^"]+?)"/', $breadcrumb, $matches);

      // Remove base path from href.
      $href = '';
      if (!empty($matches[1])) {
        global $base_path;
        if (stripos($matches[1], $base_path) === 0) {
          $href = drupal_substr($matches[1], drupal_strlen($base_path));
        }
        else {
          $href = $matches[1];
        }
        $href = empty($href) ? '<front>' : $href;
      }

      $title = strip_tags($breadcrumb);

      // Wrap title in additional element for microdata support.
      if ($snippet == PATH_BREADCRUMBS_RICH_SNIPPETS_MICRODATA) {
        $title = '<span itemprop="title">' . $title . '</span>';
      }

      // Build new text or link breadcrumb.
      $new_breadcrumb = !empty($href) ? l($title, $href, $options) : $title;

      // Replace old breadcrumb link with a new one.
      $breadcrumbs[$key] = '<' . $elem_tag . ' class="' . implode(' ', $classes) . '" ' . $elem_property . '>' . $new_breadcrumb . '</' . $elem_tag . '>';
    }

    $delimiter = variable_get('path_breadcrumbs_delimiter', 'Â»');
    $output .= '<div class="breadcrumb"' . $root_property . '>' . implode(' ' . trim($delimiter) . ' ', $breadcrumbs) . '</div>';
    return $output;
  }
}

/**
 * Save path breadcrumb.
 *
 * @param  $breadcrumb
 *   Object with path breadcrumb data.
 * @return int
 *   ID of inserted/updated path breadcrumb.
 */
function path_breadcrumbs_save($breadcrumb) {

  // Build array with full access data.
  if (!empty($breadcrumb->access) && !empty($breadcrumb->logic)) {
    $breadcrumb->access['logic'] = $breadcrumb->logic;
  }
  elseif (empty($breadcrumb->access)) {
    $breadcrumb->access = array();
  }

  // Build data to be inserted in database.
  $insert_data = array(
    'name'         => $breadcrumb->name,
    'machine_name' => $breadcrumb->machine_name,
    'path'         => $breadcrumb->path,
    'data'         => serialize(array(
      'titles'        => $breadcrumb->titles,
      'paths'         => $breadcrumb->paths,
      'home'          => $breadcrumb->home,
      'translatable'  => $breadcrumb->translatable,
      'arguments'     => $breadcrumb->arguments,
      'access'        => $breadcrumb->access,
    )),
  );

  if (!empty($breadcrumb->path_id)) {
    // Update path breadcrumbs.
    db_update('path_breadcrumbs')
      ->fields($insert_data)
      ->condition('path_id', $breadcrumb->path_id)
      ->execute();
  }
  else {
    // Create new path breadcrumbs.
    $breadcrumb->is_new = TRUE;
    $breadcrumb->path_id = db_insert('path_breadcrumbs')
      ->fields($insert_data)
      ->execute();
  }

  // Remove data from ctools object cache table.
  path_breadcrumbs_object_cache_clear($breadcrumb->machine_name);

  // Allow modules to know that path_breadcrumbs were saved.
  $breadcrumb->is_new = empty($breadcrumb->is_new) ? FALSE : TRUE;
  module_invoke_all('path_breadcrumbs_save', $breadcrumb);

  // Return path breadcrumb ID.
  return $breadcrumb->path_id;
}

/**
 * Delete path breadcrumb.
 *
 * @param  $path_breadcrumb
 *   Path breadcrumb ID or Object to delete.
 * @return bool
 *   Result of path breadcrumb deletion.
 */
function path_breadcrumbs_delete($path_breadcrumb) {

  if (ctype_digit($path_breadcrumb)) {
    $path_id = $path_breadcrumb;
    $path_breadcrumb = path_breadcrumbs_load($path_id);
  }
  elseif (is_object($path_breadcrumb)) {
    $path_id = $path_breadcrumb->path_id;
  }
  else {
    return FALSE;
  }

  // Inform modules about deleting path_breadcrumbs
  module_invoke_all('path_breadcrumbs_delete', $path_breadcrumb);

  // Delete path breadcrumbs from database.
  $result = db_delete('path_breadcrumbs')
    ->condition('path_id', $path_id)
    ->execute();

  return $result;
}

/**
 * Load path breadcrumbs by ID.
 *
 * @param  $path_id
 *   ID of path breadcrumb that should be loaded
 * @return object
 *   Loaded path breadcrumb
 */
function path_breadcrumbs_load($path_id) {
  static $paths;

  // See if current breadcrumb already was loaded.
  if (!isset($paths[$path_id])) {

    // Load breadcrumb from database.
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.path_id', $path_id)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      // Merge breadcrumb data with parent for more flattening structure.
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$path_id] = $breadcrumb;
  }

  return $paths[$path_id];
}

/**
 * Load path breadcrumb by name.
 *
 * @param  $name
 *   Path breadcrumb's name.
 * @return object
 *   Object with path breadcrumb.
 */
function path_breadcrumbs_load_by_name($name) {
  static $paths;

  // See if current breadcrumb already was loaded.
  if (!isset($paths[$name])) {

    // Load breadcrumb from database.
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.machine_name', $name)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      // Merge breadcrumb data with parent for more flattening structure.
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$name] = $breadcrumb;
  }

  return $paths[$name];
}

/**
 * Load ctools contexts from path arguments.
 *
 * @param $arguments
 *   Path arguments.
 * @return array
 */
function path_breadcrumbs_get_contexts_from_arguments($arguments, $empty = FALSE) {
  $contexts = array();

  // Include ctools library for contexts.
  ctools_include('context');

  if (!empty($arguments)) {

    // Get contexts from arguments.
    foreach ($arguments as $keyword => $arg) {
      if (!empty($arg['argument'])) {
        $argument = ctools_get_argument($arg['argument']);
        if (isset($arg['settings'])) {
          $argument = array_merge($argument, $arg['settings']);
        }

        // See what we should return: empty contexts or from path arguments.
        $arg = $empty ? NULL : arg($arg['position']);

        // Build context.
        $context = call_user_func($argument['context'], $arg, $argument, $empty);
        if (!empty($context)) {
          $context->keyword = $keyword;
          $context->identifier = $argument['identifier'];
          $contexts[$keyword] = $context;
        }
        else {
          $contexts['broken_context'] = $keyword;
        }
      }
    }
  }
  return $contexts;
}

/**
 * Get path breadcrumb data from cache.
 *
 * @param  $name
 *   Machine name of path breadcrumb that should be loaded.
 * @param bool $skip_cache
 *   Skip current cache or not.
 * @return object
 *   Return cached object.
 */
function path_breadcrumbs_object_cache_get($name, $skip_cache = FALSE) {
  ctools_include('object-cache');
  return ctools_object_cache_get('path_breadcrumbs', $name, $skip_cache);
}

/**
 * Cache path breadcrumb data.
 *
 * @param  $name
 *   Machine name of path breadcrumb.
 * @param  $data
 *   Data to store.
 * @return void
 */
function path_breadcrumbs_object_cache_set($name, $data) {
  ctools_include('object-cache');
  $data = (object) $data;
  ctools_object_cache_set('path_breadcrumbs', $name, $data);
}

/**
 * Clear ctools object cache.
 *
 * @param $name
 *   Path breadcrumb name.
 */
function path_breadcrumbs_object_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('path_breadcrumbs', $name);
}
