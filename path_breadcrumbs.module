<?php

/**
 * Implements hook_menu().
 */
function path_breadcrumbs_menu() {

  $items['admin/structure/path-breadcrumbs'] = array(
    'title' => 'Path breadcrumbs',
    'page callback' => 'path_breadcrumbs_admin_page',
    'access arguments' => array('administer path breadcrumbs'),
    'file' => 'path_breadcrumbs.admin.inc',
  );

  $items['admin/structure/path-breadcrumbs/create'] = array(
    'title' => 'Create path breadcrumbs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_breadcrumbs_add_form'),
    'access arguments' => array('administer path breadcrumbs'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/path-breadcrumbs/edit/%path_breadcrumbs'] = array(
    'title' => 'Edit path breadcrumbs',
    'page callback' => 'path_breadcrumbs_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('administer path breadcrumbs'),
    'file' => 'path_breadcrumbs.pages.inc'
  );

  $items['admin/structure/path-breadcrumbs/edit/%path_breadcrumbs/ajax/%'] = array(
    'page callback' => 'path_breadcrumbs_edit_form_ajax_links',
    'page arguments' => array(4, 6),
    'access arguments' => array('administer path breadcrumbs'),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'path_breadcrumbs.pages.inc',
  );

  $items['admin/structure/path-breadcrumbs/delete/%path_breadcrumbs'] = array(
    'title callback' => 'path_breadcrumbs_edit_page_title',
    'title arguments' => array(4, 'delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_breadcrumbs_delete_form', 4),
    'access arguments' => array('administer path breadcrumbs'),
  );

  $items['admin/structure/path-breadcrumbs/arguments/settings/%/%'] = array(
    'page callback' => 'path_breadcrumbs_configure_arguments_page',
    'page arguments' => array(5, 6),
    'access arguments' => array('administer path breadcrumbs'),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'path_breadcrumbs.pages.inc',
  );

  $items['admin/structure/path-breadcrumbs/arguments/change/%/%'] = array(
    'page callback' => 'path_breadcrumbs_change_arguments_page',
    'page arguments' => array(5, 6),
    'access arguments' => array('administer path breadcrumbs'),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'path_breadcrumbs.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function path_breadcrumbs_permission() {
  return array(
    'administer path breadcrumbs' => array(
      'title' => t('Administer Path breadcrumbs'),
      'description' => t('Allows to set or delete path breadcrumbs'),
    ),
  );
}

/**
 * Implementats hook_theme().
 */
function path_breadcrumbs_theme(&$items, $task) {
  return array(
    'path_breadcrumbs_form_step_arguments_selection_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function path_breadcrumbs_page_alter(&$page) {

  // See if current page has path breadcrumbs.
  $variant = path_breadcrumbs_load_variant(request_path());

  // If object with breadcrumbs was loaded - build breadcrumbs.
  if ($variant) {
    $breadcrumbs = _path_breadcrumbs_build_breadcrumbs($variant);
    drupal_set_breadcrumb($breadcrumbs);
  }
}

/**
 * Load path breadcrumb variants by path.
 */
function path_breadcrumbs_load_variant($path) {

  if (!$path) {
    return FALSE;
  }

  // Create sql pattern from url.
  $path_vars = explode('/', $path);
  if ($args_count = (sizeof($path_vars) - 1)) {
    $sql_path = array_fill(0, $args_count, '%');
    array_unshift($sql_path, $path_vars[0]);
    $sql_replacements = implode('/', $sql_path);
  }
  else {
    $sql_replacements = $path;
  }

  $variants = db_select('path_breadcrumbs', 'p')
    ->fields('p',  array('path_id', 'path'))
    ->condition('p.path', $sql_replacements, 'LIKE')
    ->execute();

  foreach ($variants as $variant) {
    $matched_path = array();
    $arguments    = explode('/', $variant->path);
    foreach ($arguments as $argument) {
      if ($argument[0] == '%') {
        $matched_path[] = '*';
      }
      else {
        $matched_path[] = $argument;
      }
    }
    $matched_path = implode('/', $matched_path);
    if (drupal_match_path($path, $matched_path)) {
      return path_breadcrumbs_load($variant->path_id);
    }
  }

  return FALSE;
}

/**
 * Builds array with breadcrumbs.
 */
function _path_breadcrumbs_build_breadcrumbs($path_breadcrumb) {
  $breadcrumb = array();

  // Add HOME link.
  if ($path_breadcrumb->home == TRUE) {
    $breadcrumb[] = l(t('Home'), '<front>');
  }

  if (!empty($path_breadcrumb->arguments)) {

    // Include ctools library for contexts.
    ctools_include('context');
    $contexts = array();

    // Get contexts from arguments.
    foreach ($path_breadcrumb->arguments as $keyword => $arg) {
      if (!empty($arg['argument'])) {
        $argument = ctools_get_argument($arg['argument']);
        if (isset($arg['settings'])) {
          $argument = array_merge($argument, $arg['settings']);
        }
        $context  = call_user_func($argument['context'], arg($arg['position']), $argument);
        $context->keyword = $keyword;
        $contexts[] = $context;
      }
    }

    // Replace placeholders by current values.
    $path_breadcrumb->titles = ctools_context_keyword_substitute($path_breadcrumb->titles, array(), $contexts);
    $path_breadcrumb->paths  = ctools_context_keyword_substitute($path_breadcrumb->paths, array(), $contexts);
  }

  $titles = explode("\n", $path_breadcrumb->titles);
  $paths  = explode("\n", $path_breadcrumb->paths);

  foreach ($titles as $key => $title) {

    // Translate breadcrumb title if needed.
    if ($path_breadcrumb->translatable == TRUE) {
      $title = t($title);
    }

    // Set a breadcrumb as a link or as a plain text.
    if (isset($paths[$key]) && $paths[$key] != '<none>') {
      $breadcrumb[] = l(check_plain($title), $paths[$key]);
    }
    elseif (isset($paths[$key]) && $paths[$key] == '<none>') {
      $breadcrumb[] = check_plain($title);
    }
  }

  return $breadcrumb;
}

/**
 * Multistep form that creates new path breacrumbs.
 */
function path_breadcrumbs_add_form($form, &$form_state) {

  $form['#prefix'] = '<div id="path-breadcrumbs-add-form-wrapper">';
  $form['#suffix'] = '</div>';

  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  $step = $form_state['storage']['step'];

  $form_build_function = '';
  switch ($step) {
    case 1:
      $form_build_function = 'basic_settings';
      break;

    case 2:
      $form_build_function = 'arguments_selection';
      break;

    case 3:
      //$form_build_function = 'selection_rules';
      $form_build_function = 'breadcrumbs_settings';
      break;

    case 4:
      $form_build_function = 'breadcrumbs_settings';
      break;
  }

  // Build form according to current step.
  $function = '_path_breadcrumbs_form_step_' . $form_build_function;
  if (function_exists($function)) {
    $function($form, $form_state);
  }

  $form['#submit'][] = 'path_breadcrumbs_add_form_submit';

  return $form;
}

/**
 * Ajax callback for path_breadcrumbs_add_form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function path_breadcrumbs_add_form_ajax_callback($form, $form_state) {

  if (!form_get_errors()) {
    $values = $form_state['values'];
    if (isset($values['finish']) && $values['op'] == $values['finish']) {

      // Save breadcrumb from cache to permanent storage.
      $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['machine_name']);
      path_breadcrumbs_save($breadcrumb);

      drupal_set_message(t('New breadcrumbs was created.'));
      ctools_include('ajax');
      $commands   = array();
      $commands[] = ctools_ajax_command_redirect('admin/structure/path-breadcrumbs');
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }

  // Just reload form.
  return $form;
}

/**
 * Submit callback for path_breadcrumbs_add_form.
 *
 * @param $form
 * @param $form_state
 */
function path_breadcrumbs_add_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Initialize storage.
  if (isset($values['machine_name'])) {
    $form_state['storage']['machine_name'] = $values['machine_name'];
  }

  $machine_name = $form_state['storage']['machine_name'];

  // Update cache.
  $breadcrumb = path_breadcrumbs_object_cache_get($machine_name);
  if (empty($breadcrumb)) {
    // Initialize cache data.
    $breadcrumb = array();
  }
  // Merge data into cache storage.
  $breadcrumb = array_merge((array) $breadcrumb, $values);
  path_breadcrumbs_object_cache_set($machine_name, $breadcrumb);

  // Switch current step.
  if (isset($values['next']) && $values['op'] == $values['next']) {
    $form_state['storage']['step']++;
  }
  elseif (isset($values['prev']) && $values['op'] == $values['prev']) {
    $form_state['storage']['step']--;
  }
  elseif (isset($values['finish']) && $values['op'] == $values['finish']) {
    $form_state['rebuild'] = FALSE;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Provide form with basic settings.
 */
function _path_breadcrumbs_form_step_basic_settings(&$form, &$form_state) {

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Display name'),
    '#required' => TRUE,
  );

  $form['machine_name'] = array(
    '#type' => 'machine_name',
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'path_breadcrumbs_load_by_name',
      'source' => array('name'),
    ),
  );

  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#description' => t('No first slash. Example: node/10/edit. Also you may use wildcards with * symbol. Example: node/*/edit.'),
    '#required' => TRUE,
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );

  $form['#validate'][] = '_path_breadcrumbs_form_step_basic_settings_validate';
  $form['#submit'][] = '_path_breadcrumbs_form_step_basic_settings_submit';

  if (!empty($form_state['storage']['machine_name'])) {
    _path_breadcrumbs_form_apply_default_values($form, $form_state['storage']['machine_name']);
  }

  _path_breadcrumbs_form_attach_buttons($form, array('next'), 'path_breadcrumbs_add_form');
}

/**
 * Validate function for basic settings form.
 */
function _path_breadcrumbs_form_step_basic_settings_validate(&$form, &$form_state) {

  $path = explode('/', $form_state['values']['path']);
  $correct_path = array();
  foreach ($path as $position => $bit) {
    if (!$trimmed_bit = trim($bit)) {
      continue;
    }

    // Correct some mistakes that user might make.
    $correct_path[] = $trimmed_bit;

    if ($trimmed_bit[0] == '%' && $position == 0) {
      form_error($form['path'], t('The first element in a path may not be dynamic.'));
    }
  }

  // Save correct path.
  $form_state['values']['path'] = implode('/', $correct_path);

  $args = array();
  foreach ($correct_path as $position => $bit) {
    if ($bit[0] == '%' && drupal_strlen($bit) === 1) {
      form_error($form['path'], t('Invalid arg <em>%</em>. All arguments must be named with keywords.'));
    }
    elseif ($bit[0] == '%') {
      $args[substr($bit, 1)]['position'] = $position;
    }
  }

  $form_state['values']['keywords'] = $args;
}

/**
 * Submit function for basic settings form.
 */
function _path_breadcrumbs_form_step_basic_settings_submit($form, &$form_state) {

  if (empty($form_state['storage']['machine_name'])) {
    return FALSE;
  }

  $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['machine_name']);
  if (empty($breadcrumb)) {
    return FALSE;
  }

  // Check if argument matches all keywords.
  if (!empty($form_state['values']['keywords'])) {
    $arguments = array();
    foreach ($form_state['values']['keywords'] as $keyword => $position) {
      // Ensure that keywords were not changed after path update.
      if (!empty($breadcrumb->arguments[$keyword])) {
        $arguments[$keyword] = $breadcrumb->arguments[$keyword];
      }
    }
    $breadcrumb->arguments = $arguments;
    path_breadcrumbs_object_cache_set($form_state['storage']['machine_name'], $breadcrumb);
  }
}

/**
 * Provide form arguments selection.
 */
function _path_breadcrumbs_form_step_arguments_selection(&$form, &$form_state) {

  if (isset($form_state['storage']['machine_name'])) {
    $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['machine_name']);

    // Merge data of arguments and keywords.
    if (!empty($breadcrumb->keywords)) {
      foreach ($breadcrumb->keywords as $keyword => $position) {
        $breadcrumb->arguments[$keyword]['position'] = $position['position'];
      }
    }
  }

  if (empty($breadcrumb)) {
    return;
  }

  $form['table'] = array(
    '#theme' => 'path_breadcrumbs_form_step_arguments_selection_table',
    '#breadcrumbs-path' => $breadcrumb->path,
    'argument' => array(),
  );

  foreach ($breadcrumb->arguments as $keyword => $argument) {

    $context_title = t('No context assigned');

    // Get context from cached data if presented.
    if (!empty($breadcrumb->arguments[$keyword]['argument'])) {
      ctools_include('context');
      $plugin = ctools_get_argument($breadcrumb->arguments[$keyword]['argument']);
      if (isset($plugin['title'])) {
        $context_title = $plugin['title'];
      }
    }

    $form['table']['argument'][$keyword]['#keyword']  = $keyword;
    $form['table']['argument'][$keyword]['#position'] = $argument['position'];
    $form['table']['argument'][$keyword]['#context']  = $context_title;

    // The URL for this ajax button.
    $form['table']['argument'][$keyword]['change-url'] = array(
      '#attributes' => array('class' => array("page-manager-context-$keyword-change-url")),
      '#type' => 'hidden',
      '#value' => url('admin/structure/path-breadcrumbs/arguments/settings/' . $breadcrumb->machine_name . '/' . $keyword, array('absolute' => TRUE)),
    );

    $form['table']['argument'][$keyword]['change'] = array(
      '#type' => 'submit',
      '#value' => t('Change'),
      '#attributes' => array('class' => array('ctools-use-modal')),
      '#id' => "page-manager-context-$keyword-change",
    );

    // Only show the button if this has a settings form available.
    if (!empty($plugin)) {

      // The URL for this ajax button.
      $form['table']['argument'][$keyword]['settings-url'] = array(
        '#attributes' => array('class' => array("page-manager-context-$keyword-settings-url")),
        '#type' => 'hidden',
        '#value' => url('admin/structure/path-breadcrumbs/arguments/change/' . $breadcrumb->machine_name . '/' . $keyword, array('absolute' => TRUE)),
      );

      $form['table']['argument'][$keyword]['settings'] = array(
        '#type' => 'submit',
        '#value' => t('Settings'),
        '#attributes' => array('class' => array('ctools-use-modal')),
        '#id' => "page-manager-context-$keyword-settings",
      );
    }
  }

  _path_breadcrumbs_form_attach_buttons($form, array('next', 'prev'), 'path_breadcrumbs_add_form');
}

/**
 * Provide form for breadcrumb settings.
 */
function _path_breadcrumbs_form_step_breadcrumbs_settings(&$form, &$form_state) {

  if (isset($form_state['storage']['machine_name'])) {
    $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['machine_name']);
  }

  if (empty($breadcrumb)) {
    return;
  }

  $form['translatable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Translatable'),
    '#description' => t('Every breadcrumb will be availible for translation.')
  );

  $form['home'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prepend Home Link to the Breadcrumb'),
    '#description' => t('First breadcrumb will be a link to the front page.')
  );

  $form['titles'] = array(
    '#type' => 'textarea',
    '#title' => t('Breadcrumb titles'),
    '#required' => TRUE,
    '#description' => t('Enter one title per line.'),
  );

  $form['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Breadcrumb paths'),
    '#required' => TRUE,
    '#description' => t('Enter one path per line. You can use @front to link
      to the front page, or @none for no link.', array('@front' => '<front>', '@none' => '<none>')),
  );

  // Build context substitutions.
  $rows = array();

  if (!empty($breadcrumb->arguments)) {
    ctools_include('context');
    foreach ($breadcrumb->arguments as $keyword => $arg) {
      $argument = ctools_get_argument($arg['argument']);
      $context = ctools_context_get_context_from_argument($argument, $keyword, TRUE);
      $converters = ctools_context_get_converters('%' . check_plain($keyword) . ':', $context);
      foreach ($converters as $substitution => $title) {
        $rows[] = array(
          check_plain($substitution),
          t($title),
        );
      }
    }
  }

  if (!empty($rows)) {
    $header = array(t('Keyword'), t('Value'));
    $form['contexts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Substitutions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#value' => theme('table', array('header' => $header, 'rows' => $rows)),
    );
  }

  _path_breadcrumbs_form_attach_buttons($form, array('prev', 'finish'), 'path_breadcrumbs_add_form');

  if (isset($form_state['storage']['machine_name'])) {
    _path_breadcrumbs_form_apply_default_values($form, $form_state['storage']['machine_name']);
  }

}

/**
 * Theme the table for argument settings form.
 */
function theme_path_breadcrumbs_form_step_arguments_selection_table($vars) {

  $header = array(
    array('data' => t('Argument')),
    array('data' => t('Position in path')),
    array('data' => t('Context assigned')),
    array('data' => t('Operations')),
  );

  $form = $vars['form'];
  ctools_include('modal');
  ctools_modal_add_js();

  $rows = array();
  foreach (element_children($form['argument']) as $key) {
    $row   = array();
    $row[] = check_plain($form['argument'][$key]['#keyword']);
    $row[] = check_plain($form['argument'][$key]['#position']);
    $row[] = $form['argument'][$key]['#context'] . ' &nbsp; ' . drupal_render($form['argument'][$key]['change']);
    $row[] = drupal_render($form['argument'][$key]['settings']) . drupal_render($form['argument'][$key]);
    $rows[]  = array('data' => $row);
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('The path %path has no arguments to configure.', array('%path' => $form['#breadcrumbs-path'])), 'colspan' => 4));
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'path-breadcrumbs-argument-table')
  ));
}

/**
 * Add default values to form if presented.
 */
function _path_breadcrumbs_form_apply_default_values(&$form, $breadcrumb) {

  // Load breacrumb from cache by machine_name.
  if (is_string($breadcrumb)) {
    $breadcrumb = path_breadcrumbs_object_cache_get($breadcrumb);
  }
  elseif (is_object($breadcrumb)) {
    if (!empty($breadcrumb->data)) {
      $breadcrumb = (object) array_merge((array) $breadcrumb, (array) $breadcrumb->data);
    }
  }

  if (!empty($breadcrumb)) {
    foreach ($form as $key => $value) {
      if (!empty($breadcrumb->{$key}) && is_array($breadcrumb->{$key})) {
        foreach ($breadcrumb->{$key} as $array_key => $value) {
          $form[$key][$array_key]['#default_value'] = $value;
        }
      }
      elseif (!empty($breadcrumb->{$key})) {
        $form[$key]['#default_value'] = $breadcrumb->{$key};
      }
    }
  }
}

/**
 * Attach ajax buttons to form.
 */
function _path_breadcrumbs_form_attach_buttons(&$form, $buttons = array(), $form_name) {

  $form_wrapper = str_replace('_', '-', $form_name);

  $base = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => $form_name . '_ajax_callback',
      'wrapper' => $form_wrapper . '-wrapper',
    ),
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  if (in_array('prev', $buttons)) {
    $form['actions']['prev'] = array(
      '#value' => t('Back'),
      // Do not validate form when BACK button clicked.
      '#limit_validation_errors' => array(),
      '#submit' => array($form_name . '_submit'),
    ) + $base;
  }

  if (in_array('next', $buttons)) {
    $form['actions']['next'] = array(
      '#value' => t('Continue'),
    ) + $base;
  }

  if (in_array('finish', $buttons)) {
    $form['actions']['finish'] = array(
      '#value' => t('Finish'),
    ) + $base;
  }
}

/**
 * Form that return availible matches for path arguments.
 */
function path_breadcrumbs_argument_context_form($form, $form_state, $path_name = NULL, $keyword = NULL) {

  $form['#prefix'] = '<div id="path-breadcrumbs-argument-context-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree']   = TRUE;

  if ($path_name) {
    $form['path_name'] = array(
      '#type' => 'value',
      '#value' => $path_name,
    );
  }

  if ($keyword) {
    $form['keyword'] = array(
      '#type' => 'value',
      '#value' => $keyword,
    );
  }

  // Get current form step.
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  $step = $form_state['storage']['step'];

  ctools_include('context');

  switch ($step) {
    case 1:

      $plugins = ctools_get_arguments();

      $options = array();
      foreach ($plugins as $id => $plugin) {
        if (empty($plugin['no ui'])) {
          $options[$id] = $plugin['title'];
        }
      }
      asort($options);

      $options = array('' => t('No context selected')) + $options;
      $form['argument'] = array(
        '#type' => 'radios',
        '#options' => $options,
      );

      if (isset($form_state['storage']['argument'])) {
        $form['argument']['#default_value'] = $form_state['storage']['argument'];
      }
      else {
        $breadcrumb = path_breadcrumbs_object_cache_get($path_name);
        if (isset($breadcrumb->arguments[$keyword])) {
          $form['argument']['#default_value'] = $breadcrumb->arguments[$keyword]['argument'];
        }
      }

      _path_breadcrumbs_form_attach_buttons($form, array('next'), 'path_breadcrumbs_argument_context_form');

      break;

    case 2:

      $plugin = ctools_get_argument($form_state['storage']['argument']);
      if ($function = (string) ctools_plugin_get_function($plugin, 'settings form')) {
        $settings_form = $settings_form_state = array();
        $function($settings_form, $settings_form_state);
        $form += $settings_form;
      }
      else {
        $form['message'] = array(
          '#type' => 'item',
          '#markup' => t("Current argument doesn't contains settings form"),
        );
      }

      _path_breadcrumbs_form_attach_buttons($form, array('prev', 'finish'), 'path_breadcrumbs_argument_context_form');
      _path_breadcrumbs_form_apply_default_values($form, $form_state['storage']['path_name']);

      break;
  }

  return $form;
}

/**
 * Submit callback for path_breadcrumbs_argument_context_form.
 *
 * @param $form
 * @param $form_state
 */
function path_breadcrumbs_argument_context_form_submit($form, &$form_state) {
  $values  = $form_state['values'];
  $actions = $form_state['values']['actions'];

  if (empty($form_state['storage'])) {
    $form_state['storage'] = array();
  }

  $form_state['storage'] = array_merge($form_state['storage'], $values);

  // Merge data into cache storage.
  $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['path_name']);
  $breadcrumb = array_merge((array) $breadcrumb, $values);
  path_breadcrumbs_object_cache_set($form_state['storage']['path_name'], $breadcrumb);

  // Switch current step.
  if (isset($actions['next']) && $values['op'] == $actions['next']) {
    $form_state['storage']['step']++;
  }
  elseif (isset($actions['prev']) && $values['op'] == $actions['prev']) {
    $form_state['storage']['step']--;
  }
  elseif (isset($actions['finish']) && $values['op'] == $actions['finish']) {
    $form_state['rebuild'] = FALSE;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for path_breadcrumbs_argument_context_form .
 */
function path_breadcrumbs_argument_context_form_ajax_callback($form, $form_state) {

  if (!form_get_errors()) {

    $values  = $form_state['values'];
    $actions = $form_state['values']['actions'];
    $keyword = $form_state['storage']['keyword'];

    if (isset($actions['finish']) && $values['op'] == $actions['finish']) {
      // Update cache data.
      $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['path_name']);
      $breadcrumb->arguments[$keyword]['argument'] = $form_state['storage']['argument'];
      if (!empty($values['settings'])) {
        $breadcrumb->arguments[$keyword]['settings'] = $values['settings'];
      }
      path_breadcrumbs_object_cache_set($form_state['storage']['path_name'], $breadcrumb);

      // Rebuild second step of path breadcrumbs add_form.
      $add_form_state = array(
        'storage' => array(
          'step' => 2,
          'machine_name' => $form_state['storage']['path_name'],
        ));

      $form = drupal_build_form('path_breadcrumbs_add_form', $add_form_state);

      ctools_include('modal');

      // Include additinal ajax commands.
      $commands[] = ajax_command_replace('#path-breadcrumbs-argument-table', drupal_render($form['table']));
      $commands[] = ctools_modal_command_dismiss();

      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }

  return $form;
}

/**
 * Form for editing path breadcrumbs.
 */
function path_breadcrumbs_edit_form($form, $form_state, $breadcrumb, $step) {

  $form_state['storage']['machine_name'] = $breadcrumb->machine_name;
  $form_state['storage']['step'] = $step;

  $form = path_breadcrumbs_add_form(array(), $form_state);

  $form['#prefix'] = '<div id="path-breadcrumbs-edit-form-wrapper">';
  $form['#suffix'] = '</div>';

  // Disable machine name edition.
  if ($step == 1) {
    $form['machine_name']['#disabled'] = TRUE;
  }

  // Set two submit buttons for every form.

  $form['actions'] = array(
    '#type' => 'action',
    '#weight' => 100,
  );

  $base = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'path_breadcrumbs_edit_form_ajax_callback',
      'wrapper' => 'path-breadcrumbs-edit-form-wrapper',
    ),
  );

  $form['actions']['update'] = array(
    '#value' => t('Update')
  ) + $base;

  $form['actions']['update_save'] = array(
    '#value' => t('Update and Save')
  ) + $base;

  $form['#submit'][] = 'path_breadcrumbs_edit_form_submit';

  return $form;
}

/**
 * Ajax callback for path breadcrumbs EDIT form.
 */
function path_breadcrumbs_edit_form_ajax_callback($form, $form_state) {
  if (!form_get_errors()) {
    $values = $form_state['values'];
    if (isset($values['update_save']) && $values['op'] == $values['update_save']) {
      ctools_include('ajax');
      $commands = array();
      $commands[] = ctools_ajax_command_redirect('admin/structure/path-breadcrumbs');
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }
  return $form;
}

/**
 * Submit callback for path breadcrumbs EDIT form.
 */
function path_breadcrumbs_edit_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if (isset($values['update']) && $values['op'] == $values['update']) {
    drupal_set_message(t('The breadcrumbs has been updated.'));
    drupal_set_message(t('Changes will not be permanent until you save it.'), 'warning');
  }
  elseif (isset($values['update_save']) && $values['op'] == $values['update_save']) {
    $breadcrumb = path_breadcrumbs_object_cache_get($form_state['storage']['machine_name']);
    path_breadcrumbs_save($breadcrumb);
    drupal_set_message(t('Breadcrumb %name was updated.', array('%name' => $breadcrumb->name)));
  }
}

/**
 * Form for removing path breadcrumbs from database.
 */
function path_breadcrumbs_delete_form($form, $form_state, $path_breadcrumbs) {

  $form['path_id'] = array(
    '#type' => 'value',
    '#value' => $path_breadcrumbs->path_id,
  );

  $form['message'] = array(
    '#markup' => t('Are you sure that you want to delete %name from database?', array('%name' => $path_breadcrumbs->name))
  );

  $form['actions'] = array(
    '#type' => 'actions'
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );

  return $form;
}

/**
 * Submit callback for path_breadcrumbs_delete_form.
 * Removes path breadcrumbs from database.
 */
function path_breadcrumbs_delete_form_submit($form, &$form_state) {

  $values = $form_state['values'];
  if ($values['op'] == $values['submit']) {
    path_breadcrumbs_delete($values['path_id']);
    drupal_set_message(t('Path breadcrumb was successfully deleted.'));
  }

  // Redirect to the settings page.
  $form_state['redirect'] = 'admin/structure/path-breadcrumbs';
}

/**
 * Save path breadcrumbs.
 */
function path_breadcrumbs_save($breadcrumb) {

  // Remove spaces and empty lines in breadcrumb titles.
  $titles_output = array();
  $titles = explode("\r\n", $breadcrumb->titles);
  foreach ($titles as $title) {
    if ($trimmed_title = trim($title)) {
      $titles_output[] = $trimmed_title;
    }
  }

  // Remove spaces and empty lines in breadcrumb titles.
  $paths_output = array();
  $paths = explode("\r\n", $breadcrumb->paths);
  foreach ($paths as $path) {
    if ($trimmed_path = trim($path)) {
      $paths_output[] = $trimmed_path;
    }
  }

  // Build data to be inserted in database.
  $insert_data = array(
    'name'         => $breadcrumb->name,
    'machine_name' => $breadcrumb->machine_name,
    'path'         => $breadcrumb->path,
    'data'         => serialize(array(
      'titles'        => implode("\r\n", $titles_output),
      'paths'         => implode("\r\n", $paths_output),
      'home'          => $breadcrumb->home,
      'translatable'  => $breadcrumb->translatable,
      'arguments'     => $breadcrumb->arguments,
    )),
  );

  if (!empty($breadcrumb->path_id)) {
    // Update path breadcrumbs.
    db_update('path_breadcrumbs')
      ->fields($insert_data)
      ->condition('path_id', $breadcrumb->path_id)
      ->execute();
  }
  else {
    // Create new path breadcrumbs.
    $path_id = db_insert('path_breadcrumbs')
      ->fields($insert_data)
      ->execute();
  }

  return isset($path_id) ? $path_id : $breadcrumb->path_id;
}

/**
 * Delete path breadcrumbs.
 */
function path_breadcrumbs_delete($path_breadcrumb) {

  if (ctype_digit($path_breadcrumb)) {
    $path_id = $path_breadcrumb;
  }
  elseif (is_object($path_breadcrumb)) {
    $path_id = $path_breadcrumb->path_id;
  }
  else {
    return FALSE;
  }

  // Delete path breadcrumbs from database.
  $result = db_delete('path_breadcrumbs')
    ->condition('path_id', $path_id)
    ->execute();

  return $result;
}

/**
 * Load path breadcrumbs.
 */
function path_breadcrumbs_load($path_id) {
  static $paths;

  if (!isset($paths[$path_id])) {
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.path_id', $path_id)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$path_id] = $breadcrumb;
  }

  return $paths[$path_id];
}

/**
 * Load path breadcrumb by machine name.
 */
function path_breadcrumbs_load_by_name($name) {
  static $paths;

  if (!isset($paths[$name])) {
    $breadcrumb = db_select('path_breadcrumbs', 'p')
      ->fields('p')
      ->condition('p.machine_name', $name)
      ->execute()
      ->fetchObject();

    if ($breadcrumb) {
      $breadcrumb->data = unserialize($breadcrumb->data);
      $breadcrumb = (object) array_merge((array) $breadcrumb, $breadcrumb->data);
      unset($breadcrumb->data);
    }
    $paths[$name] = $breadcrumb;
  }

  return $paths[$name];
}

/**
 * Return ctools object cache data.
 */
function path_breadcrumbs_object_cache_get($name, $skip_cache = FALSE) {
  ctools_include('object-cache');
  return ctools_object_cache_get('path_breadcrumbs', $name, $skip_cache);
}

/**
 * Save data to ctools object cache storage.
 */
function path_breadcrumbs_object_cache_set($name, $data) {
  ctools_include('object-cache');
  $data = (object) $data;
  ctools_object_cache_set('path_breadcrumbs', $name, $data);
}
